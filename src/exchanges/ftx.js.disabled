const Exchange = require('../exchange')
const WebSocket = require('websocket').w3cwebsocket
const axios = require('axios')
const { getHms, sleep } = require('../helper')

class Ftx extends Exchange {
  constructor() {
    super()

    this.id = 'FTX'

    this.endpoints = {
      PRODUCTS: 'https://ftx.com/api/markets',
    }

    this.url = () => {
          return `wss://ftx.com/ws/`
        };

    this.missingTrades=[]
  }

  formatProducts(data) {
    return data.result.map((product) => product.name)
  }

  /**
   * Sub
   * @param {WebSocket} api
   * @param {string} pair
   */
  async subscribe(api, pair) {
    if (!(await super.subscribe.apply(this, arguments))) {
      return
    }

    api.send(
      JSON.stringify({
        op: 'subscribe',
        channel: 'trades',
        market: pair,
      })
    )
  }

  /**
   * Unsub
   * @param {WebSocket} api
   * @param {string} pair
   */
  async unsubscribe(api, pair) {
    if (!(await super.unsubscribe.apply(this, arguments))) {
      return
    }

    api.send(
      JSON.stringify({
        op: 'unsubscribe',
        channel: 'trades',
        market: pair,
      })
    )
  }

  onMessage(event, api) {
    const json = JSON.parse(event.data)

    if (!json || !json.data || !json.data.length) {
      return
    }

    return this.emitTrades(
      api.id,
      json.data.map((trade) => this.formatTrade(trade, json.market))
    )
  }

  formatTrade(trade, pair) {
    return {
      exchange: this.id,
      pair: pair,
      timestamp: +new Date(trade.time),
      price: +trade.price,
      size: trade.size,
      side: trade.side,
      liquidation: trade.liquidation,
    }
  }

  getMissingTrades(range, totalRecovered = 0) {
    const startTimeSeconds = Math.floor((range.from + 1) / 1000)
    const endTimeSeconds = Math.ceil(range.to / 1000)

    if (endTimeSeconds - startTimeSeconds <= 0) {
      return totalRecovered
    }

    const endpoint = `https://ftx.com/api/markets/${range.pair}/trades?start_time=${startTimeSeconds}&end_time=${endTimeSeconds}`
    return axios
      .get(endpoint)
      .then((response) => {
        if (response.data.result.length) {
          const trades = response.data.result
            .map((trade) => this.formatTrade(trade, range.pair))
            .filter((a) => a.timestamp >= range.from + 1 && a.timestamp < range.to)

          if (trades.length) {
            this.emitTrades(null, trades)

            totalRecovered += trades.length
            range.to = trades[trades.length - 1].timestamp

            const remainingMissingTime = range.to - range.from

            if (remainingMissingTime > 1000) {
              console.log(
                `[${this.id}.recoverMissingTrades] +${trades.length} ${range.pair} ...  (${getHms(remainingMissingTime)} remaining)`
              )
              return this.waitBeforeContinueRecovery().then(() => this.getMissingTrades(range, totalRecovered))
            } else {
              console.log(`[${this.id}.recoverMissingTrades] +${trades.length} ${range.pair} (${getHms(remainingMissingTime)} remaining)`)
            }
          }
        }

        return totalRecovered
      })
      .catch((err) => {
        console.error(`Failed to get missing trades on ${range.pair}`, err.message)
      })
  }

  onApiCreated(api) {
    this.startKeepAlive(api, { op: 'ping' }, 15000)
  }

  onApiRemoved(api) {
    this.stopKeepAlive(api)
  }
}

module.exports = Ftx
